buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'de.sebastianboegl.gradle.plugins:shadow-log4j-transformer:2.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'application'
// we don't want to cause conflicts between our dependencies and the target application
// since the agent will be loaded with the same class loader as the profiled application
// so we use plugin-shadow instead of shadow to relocate all of our dependencies
apply plugin: 'com.github.johnrengelman.plugin-shadow'

ext {
	jacocoVersion = '0.7.9'
	outputVersion = rootProject.appVersion + "-jacoco-" + jacocoVersion
}

dependencies {
	compile "org.jacoco:org.jacoco.core:$jacocoVersion"
	compile "org.jacoco:org.jacoco.report:$jacocoVersion"
	compile "org.jacoco:org.jacoco.agent:$jacocoVersion:runtime"
	compileOnly "org.jacoco:org.jacoco.agent:$jacocoVersion"

	compile 'org.apache.logging.log4j:log4j-api:2.8.2'
	compile 'org.apache.logging.log4j:log4j-core:2.8.2'

	compile 'io.reactivex.rxjava2:rxjava:2.1.2'
	compile 'com.beust:jcommander:1.71'
	compile 'org.conqat:org.conqat.lib.commons:0.20160822'

	compile 'com.squareup.retrofit2:retrofit:2.4.0'

	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.8.0'
}

mainClassName = 'eu.cqse.teamscale.jacoco.agent.Main'
shadowJar {
    baseName = 'teamscale-jacoco-agent'
    classifier = null
    version = outputVersion
    manifest {
        attributes 'Premain-Class': 'eu.cqse.teamscale.jacoco.agent.Agent'
    }

    // ensures that log4j resource files are also relocated properly
    transform(de.sebastianboegl.gradle.plugins.shadow.transformers.Log4j2PluginsFileTransformer)
    transform(Log4JResourceTransformer)
}

startShadowScripts {
	applicationName = 'convert'
}

task doc(type: Exec) {
	def outputDir = file('build/doc')
	outputs.dir outputDir

	doFirst {
		mkdir outputDir
	}
	commandLine 'pandoc', 'USAGE.md', '-o', "$outputDir/userguide.pdf"
}

distributions {
	shadow {
		baseName = 'jacoco-agent'
		contents {
			from(doc) {
				include '**'
				into 'documentation'
			}

			def agentJar = configurations.compileOnly.find {
				def path = it.toString()
				path.contains('org.jacoco.agent') && !path.contains('runtime')
			}

			from(zipTree(agentJar)) {
				include 'jacocoagent.jar'
				into 'jacoco-agent'
			}
		}
	}
}

processResources {
	filesMatching('**/app.properties') {
		filter {
			it.replace('%APP_VERSION_TOKEN_REPLACED_DURING_BUILD%', rootProject.appVersion)
		}
	}
}

task dist {
	dependsOn shadowDistZip
}

task copyDockerFiles(type: Copy) {
	dependsOn shadowJar

	doFirst {
		mkdir 'build/docker'
	}

	from('src/docker') {
		include 'Dockerfile'
	}
	from(shadowJar) {
		rename(/.*/, 'agent.jar')
	}

	into 'build/docker'
}

task buildDockerImage(type: Exec) {
	dependsOn copyDockerFiles

	workingDir 'build/docker'
	commandLine 'docker', 'build', '.', '-t', "cqse/teamscale-jacoco-agent:${outputVersion}"
}

task tagDockerImage(type: Exec) {
	dependsOn buildDockerImage

	commandLine 'docker', 'tag', "cqse/teamscale-jacoco-agent:${outputVersion}", "registry.cqse.eu/cqse/teamscale-jacoco-agent:${outputVersion}"
}

task publishDockerImageInternal(type: Exec) {
	dependsOn tagDockerImage

	commandLine 'docker', 'push', "registry.cqse.eu/cqse/teamscale-jacoco-agent:${outputVersion}"
}

task loginDockerHub(type: Exec) {
	commandLine 'docker', 'login', '-u', 'cqsestreitel', '-p', System.env.DOCKER_HUB_PASSWORD
}

task publishDockerImageDockerHub(type: Exec) {
	dependsOn tagDockerImage, loginDockerHub

	commandLine 'docker', 'push', "cqse/teamscale-jacoco-agent:${outputVersion}"
}

task dockerInternal(dependsOn: publishDockerImageInternal)
task dockerHub(dependsOn: publishDockerImageDockerHub)

