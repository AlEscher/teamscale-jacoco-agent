package com.teamscale.maven.upload;

import com.teamscale.maven.TeamscaleMojoBase;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import shadow.com.teamscale.client.CommitDescriptor;
import shadow.com.teamscale.client.EReportFormat;
import shadow.com.teamscale.client.TeamscaleClient;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Binds to the VERIFY phase in which the Jacoco plugin generates its report.
 * Needs to be specified after the Jacoco goal to ensure that it is run once the Jacoco report goal has completed.
 * Offers the following functionality:
 * <ol>
 *     <li>Validate Jacoco Maven plugin configuration</li>
 *     <li>Locate and upload all reports in one session</li>
 * </ol>
 * @see <a href="https://www.jacoco.org/jacoco/trunk/doc/maven.html">Jacoco Plugin</a>
 */
@Mojo(name = "upload-coverage", defaultPhase = LifecyclePhase.VERIFY, requiresDependencyResolution = ResolutionScope.RUNTIME,
		threadSafe = true)
public class CoverageUploadMojo extends TeamscaleMojoBase {

	private static final String JACOCO_PLUGIN_NAME = "org.jacoco:jacoco-maven-plugin";

	/**
	 * The Teamscale partition name to which unit test reports will be uploaded
	 */
	@Parameter(property = "teamscale.unitTestPartition", defaultValue = "Unit Tests")
	public String unitTestPartition;

	/**
	 * The Teamscale partition name to which integration test reports will be uploaded
	 */
	@Parameter(property = "teamscale.integrationTestPartition", defaultValue = "Integration Tests")
	public String integrationTestPartition;

	/**
	 * The Teamscale partition name to which aggregated test reports will be uploaded
	 */
	@Parameter(property = "teamscale.aggregatedTestPartition", defaultValue = "Aggregated Tests")
	public String aggregatedTestPartition;

	/**
	 * Paths to all reports generated by subprojects
	 * @see <a href="https://www.jacoco.org/jacoco/trunk/doc/report-mojo.html">report</a>
	 */
	private final List<Path> reportGoalOutputFiles = new ArrayList<>();

	/**
	 * Paths to all integration reports generated by subprojects
	 * @see <a href="https://www.jacoco.org/jacoco/trunk/doc/report-integration-mojo.html">report-integration</a>
	 */
	private final List<Path> reportIntegrationGoalOutputFiles = new ArrayList<>();

	/**
	 * Paths to all aggregated reports generated by subprojects
	 * @see <a href="https://www.jacoco.org/jacoco/trunk/doc/report-aggregate-mojo.html">report-aggregate</a>
	 */
	private final List<Path> reportAggregateGoalOutputFiles = new ArrayList<>();

	/**
	 * The Teamscale client that is used to upload reports to a Teamscale instance.
	 */
	private TeamscaleClient teamscaleClient;

	@Override
	public void execute() throws MojoFailureException {
		if (skip || !session.getCurrentProject().equals(session.getTopLevelProject())) {
			getLog().debug("Skipping!");
			return;
		}
		teamscaleClient = new TeamscaleClient(teamscaleUrl, username, accessToken, projectId);
		getLog().debug("Resolving end commit");
		resolveEndCommit();
		getLog().info("Parsing Jacoco plugin configurations");
		parseJacocoConfiguration();
		try {
			getLog().debug("Uploading coverage reports");
			uploadCoverageReports();
		} catch (IOException e) {
			throw new MojoFailureException("Uploading coverage reports failed", e);
		}
	}

	/**
	 * Check that Jacoco is set up correctly and read any custom settings that may have been set
	 * @throws MojoFailureException If Jacoco is not set up correctly
	 */
	private void parseJacocoConfiguration() throws MojoFailureException {
		for (MavenProject subProject : session.getTopLevelProject().getCollectedProjects()) {
			Path defaultOutputDirectory = Paths.get(subProject.getReporting().getOutputDirectory());
			// If a Dom is null it means the execution goal uses default parameters which work correctly
			Xpp3Dom reportConfigurationDom = getJacocoGoalExecutionConfiguration(subProject,"report");
			if (!validateReportFormat(reportConfigurationDom)) {
				throw new MojoFailureException(String.format("%s in %s is not configured to produce XML reports for goal %s", JACOCO_PLUGIN_NAME, subProject.getName(), "report"));
			}
			reportGoalOutputFiles.add(getCustomOutputDirectory(reportConfigurationDom).orElse(defaultOutputDirectory.resolve("jacoco").resolve("jacoco.xml")));

			Xpp3Dom reportIntegrationConfigurationDom = getJacocoGoalExecutionConfiguration(subProject,"report-integration");
			if (!validateReportFormat(reportIntegrationConfigurationDom)) {
				throw new MojoFailureException(String.format("%s in %s is not configured to produce XML reports for goal %s", JACOCO_PLUGIN_NAME, subProject.getName(), "report-integration"));
			}
			reportIntegrationGoalOutputFiles.add(getCustomOutputDirectory(reportConfigurationDom).orElse(defaultOutputDirectory.resolve("jacoco-it").resolve("jacoco.xml")));

			Xpp3Dom reportAggregateConfigurationDom = getJacocoGoalExecutionConfiguration(subProject,"report-aggregate");
			if (!validateReportFormat(reportAggregateConfigurationDom)) {
				throw new MojoFailureException(String.format("%s in %s is not configured to produce XML reports for goal %s", JACOCO_PLUGIN_NAME, subProject.getName(), "report-aggregate"));
			}
			reportAggregateGoalOutputFiles.add(getCustomOutputDirectory(reportConfigurationDom).orElse(defaultOutputDirectory.resolve("jacoco-aggregate").resolve("jacoco.xml")));
		}
	}

	private void uploadCoverageReports() throws IOException {
		uploadCoverage(reportGoalOutputFiles, unitTestPartition);
		uploadCoverage(reportIntegrationGoalOutputFiles, integrationTestPartition);
		uploadCoverage(reportAggregateGoalOutputFiles, aggregatedTestPartition);
	}

	private void uploadCoverage(List<Path> reportOutputFiles, String partition) throws IOException {
		Collection<File> reports = reportOutputFiles.stream().map(Path::toFile).filter(File::canRead).collect(Collectors.toList());
		if (!reports.isEmpty()) {
			getLog().info(String.format("Uploading %d Jacoco report for project %s to %s", reports.size(), projectId, partition));
			teamscaleClient.uploadReports(EReportFormat.JACOCO, reports, CommitDescriptor.parse(resolvedEndCommit), revision, partition, "External upload via Teamscale Maven plugin");
		} else {
			getLog().info(String.format("Found no reports for %s", partition));
		}
	}

	/**
	 * Validates that a configuration Dom is set up to generate XML reports
	 * @param configurationDom The configuration Dom of a goal execution
	 */
	private boolean validateReportFormat(Xpp3Dom configurationDom) {
		if (configurationDom == null || configurationDom.getChild("formats") == null) {
			return true;
		}
		boolean producesXMLReport = false;
		for (Xpp3Dom format : configurationDom.getChild("formats").getChildren()) {
			if (format.getValue().equals("XML")) {
				producesXMLReport = true;
				break;
			}
		}
		return producesXMLReport;
	}

	private Optional<Path> getCustomOutputDirectory(Xpp3Dom configurationDom) {
		if (configurationDom != null && configurationDom.getChild("outputDirectory") != null) {
			return Optional.of(Paths.get(configurationDom.getChild("outputDirectory").getValue()));
		}
		return Optional.empty();
	}

	private Xpp3Dom getJacocoGoalExecutionConfiguration(MavenProject project, String pluginGoal) {
		return super.getExecutionConfigurationDom(project, JACOCO_PLUGIN_NAME, pluginGoal);
	}
}
