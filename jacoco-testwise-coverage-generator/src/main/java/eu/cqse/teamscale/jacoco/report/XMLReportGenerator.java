package eu.cqse.teamscale.jacoco.report;

import eu.cqse.teamscale.config.Project;

import java.io.*;
import java.util.*;

/**
 * Creates a XML report for eclipse like projects based on a single
 * execution data store called jacoco.exec. The report is grouped by session.
 * <p>
 * This generator supports reading execution data files from JaCoCo 0.5.x - 0.7.x.
 * This matches EclEmma versions 2.0.0 - 2.3.3.
 * <p>
 * The class files under test must be compiled with debug information, otherwise
 * source highlighting will not work.
 */
@SuppressWarnings({"unused", "WeakerAccess"})
public class XMLReportGenerator {

    private final Collection<File> executionDataFile;
    private final Collection<File> classesDirectories;

    /**
     * Create a new generator based for the given project.
     *
     * @param project           Project configuration.
     * @param executionDataFile The *.exec file generated by jacoco.
     */
    public XMLReportGenerator(final Project project, File executionDataFile) {
        this(project.classesDirectory, executionDataFile);
    }

    /**
     * Create a new generator with a single class directory and a single exec file.
     *
     * @param classesDirectory  Root directory that contains the projects class files.
     * @param executionDataFile The *.exec file generated by jacoco.
     */
    public XMLReportGenerator(final File classesDirectory, File executionDataFile) {
        this(Collections.singleton(classesDirectory), Collections.singleton(executionDataFile));
    }

    /**
     * Create a new generator with a collection of class directories and a collection of exec files.
     *
     * @param classesDirectories Root directories that contains the projects class files.
     * @param executionDataFile  The *.exec files generated by jacoco.
     */
    public XMLReportGenerator(final Collection<File> classesDirectories, Collection<File> executionDataFile) {
        this.executionDataFile = executionDataFile;
        this.classesDirectories = classesDirectories;
    }

    public void writeToFile(File report) throws IOException {
        writeToFile(report, null, null);
    }

    public void writeToFile(File report, ExecutionDataCallback executionDataCallback, SessionCallback sessionCallback) throws IOException {
        report.getAbsoluteFile().getParentFile().mkdirs();
        final ReportWriter writer = new ReportWriter(classesDirectories, sessionCallback);
        writer.startReport(report);
        for (File file : executionDataFile) {
            if (file.exists()) {
                if(executionDataCallback != null) {
                    executionDataCallback.onReadExecutionData(file);
                }
                writer.readExecutionData(file);
            } else {
                System.err.println("File does not exist: " + file.getPath());
            }
        }
        writer.finishReport();
    }

    public interface ExecutionDataCallback {
        void onReadExecutionData(File file);
    }

    public interface SessionCallback {
        void onProcessSession(String id);
    }
}