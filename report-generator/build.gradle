apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java-library'
apply plugin: 'maven'

group 'eu.cqse'
version reportGeneratorVersion

configurations {
    deployerJars
}

dependencies {
    implementation "org.jacoco:org.jacoco.core:$jacocoVersion"
    implementation "org.jacoco:org.jacoco.report:$jacocoVersion"
    implementation "org.jacoco:org.jacoco.agent:$jacocoVersion:runtime"

    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"

    implementation 'org.conqat:org.conqat.lib.commons:0.20160822'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.0'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0'

    implementation 'com.google.code.gson:gson:2.8.5'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'org.mockito:mockito-core:2.19.0'

    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

test {
    testLogging.exceptionFormat "full"
}

shadowJar {
    classifier = null
}

install {
    repositories.mavenInstaller {
        configuration = configurations.shadow
        pom.whenConfigured { it.dependencies.clear() }
    }
}

// At the moment we are stuck with the old maven plugin until support for private key
// files is added or we add a dedicated user with a password to our server.
// https://github.com/gradle/gradle/issues/1263
uploadShadow {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: cqseMavenRepositoryUrl) {
                authentication(userName: cqseMavenRepositoryUser, privateKey: cqseMavenRepositoryPrivateKey)
            }
            pom.whenConfigured { it.dependencies.clear() }
        }
    }
}
