package eu.cqse.teamscale.report.testwise.model;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import java.util.Collection;

/** Generic container of all information about a specific test including details, execution info and coverage. */
public class TestInfoContainer {

	/** The uniformPath of the test (see TEST_IMPACT_ANALYSIS_DOC.md for more information). */
	private final String uniformPath;

	/** The test details of this test. */
	private TestDetails details;

	/** Information about the execution result of this test. */
	private TestExecution execution;

	/** Coverage generated by this test. */
	private TestCoverage coverage;

	/** Constructor. */
	/* package */ TestInfoContainer(String uniformPath) {
		this.uniformPath = uniformPath;
	}

	/** @see #uniformPath */
	@XmlAttribute
	public String getUniformPath() {
		return uniformPath;
	}

	/** @see TestDetails#sourcePath */
	@XmlAttribute
	public String getSourcePath() {
		return details.sourcePath;
	}

	/** @see TestDetails#content */
	@XmlAttribute
	public String getContent() {
		return details.content;
	}

	/** @see TestExecution#durationMillis */
	@XmlAttribute
	public double getDurationMillis() {
		return execution.getDurationMillis();
	}

	/** @see TestExecution#result */
	@XmlAttribute
	public ETestExecutionResult getResult() {
		return execution.getResult();
	}

	/** Returns a collection of {@link PathCoverage}s associated with the test. */
	@XmlElement(name = "path")
	public Collection<PathCoverage> getPaths() {
		if (coverage == null) {
			System.err.println("No coverage for test '" + uniformPath + "'");
			return null;
		}
		return coverage.getPaths();
	}

	@XmlElement(name = "message")
	public TestExecution.Message getMessage() {
		return execution.getMessage();
	}

	/** Returns true if there is no coverage for the test yet. */
	public boolean isEmpty() {
		return coverage.isEmpty();
	}

	/** @see #details */
	public void setDetails(TestDetails details) {
		this.details = details;
	}

	/** @see #execution */
	public void setExecution(TestExecution execution) {
		this.execution = execution;
	}

	/** @see #coverage */
	public void setCoverage(TestCoverage coverage) {
		this.coverage = coverage;
	}
}
